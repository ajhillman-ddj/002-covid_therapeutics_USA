"0","## To allow for grouping of rows with captialised and uncaptialised city values"
"0","therapeuticsData <- therapeuticsData |>"
"0","  mutate(City = str_to_title(City))"
"0",""
"0","therapeuticsByCity <- therapeuticsData |>"
"0","  group_by(Order.Label, City, State.Code) |>"
"0","  summarise(totalCourses = sum(Courses.Available)) |>"
"0","  pivot_wider(names_from = Order.Label, values_from = totalCourses)"
"1","`summarise()` has grouped output by 'Order.Label', 'City'. You can override using the `.groups` argument.
"
"0","therapeuticsByCity[is.na(therapeuticsByCity)] <- 0"
"0",""
"0",""
"0","## To avoid matching to small towns of the same name"
"0","filteredPopulationData <- populationData |>"
"0","  mutate(stateCode = state.abb[match(STNAME,state.name)]) |>"
"0","  filter(grepl("" city"", NAME, fixed = TRUE) & POPESTIMATE2020 > 10000) |>"
"0","  mutate(cityName = str_to_title(str_replace(NAME, "" city"", """")))"
"0",""
"0",""
"0","## To exclude small cities with the same name as a big city within the same state"
"0","filteredPopulationData <- filteredPopulationData[c('cityName', 'stateCode', 'POPESTIMATE2020')]"
"0","filteredPopulationData <- filteredPopulationData[order(-filteredPopulationData$POPESTIMATE2020),]"
"0","filteredPopulationData <- filteredPopulationData[ !duplicated(filteredPopulationData$cityName, filteredPopulationData$stateCode), ]  "
"0",""
"0",""
"0","therapeuticsByCity <- merge(x = therapeuticsByCity, y = filteredPopulationData, by.x=c('City', 'State.Code'), by.y=c('cityName', 'stateCode'), all.x = TRUE)"
"0",""
"0",""
"0","## Output list of cities that couldn't be matched for checking"
"0","listOfMissingMatches <- filter(therapeuticsByCity, is.na(POPESTIMATE2020)) |>"
"0","  mutate(POPESTIMATE2020 = NULL) "
"0","  "
"0","filteredTherapeuticsByCity <- filter(therapeuticsByCity, !is.na(POPESTIMATE2020)) |>"
"0","  mutate(totalCoursesPer100000 = (Evusheld + Molnupiravir + Paxlovid)*100000/POPESTIMATE2020) |>"
"0","  mutate(evusheldCoursesPer100000 = Evusheld*100000/POPESTIMATE2020) |>"
"0","  mutate(molnuCoursesPer100000 = Molnupiravir*100000/POPESTIMATE2020) |>"
"0","  mutate(paxlovidCoursesPer100000 = Paxlovid*100000/POPESTIMATE2020)"
"0",""
"0","therapeuticsDataSummary <- therapeuticsData |>"
"0","  group_by(Order.Label) |>"
"0","  summarise(totalCourses = sum(Courses.Available)) |>"
"0","  pivot_wider(names_from = Order.Label, values_from = totalCourses)"
"0",""
"0","filteredTherapeuticsByCity <- filteredTherapeuticsByCity |>"
"0","  mutate(populationShare = POPESTIMATE2020/filter(statePopData, NAME == 'United States')$POPESTIMATE2020) |>"
"0","  mutate(evusheldShare = Evusheld / therapeuticsDataSummary$Evusheld) |>"
"0","  mutate(molnuShare = Molnupiravir / therapeuticsDataSummary$Molnupiravir) |>"
"0","  mutate(paxlovidShare = Paxlovid / therapeuticsDataSummary$Paxlovid) |>"
"0","  mutate(totalShare = (Evusheld + Molnupiravir + Paxlovid) / (therapeuticsDataSummary$Evusheld + therapeuticsDataSummary$Molnupiravir + therapeuticsDataSummary$Paxlovid))"
"0",""
"0","biggestCities <- filter(filteredTherapeuticsByCity, POPESTIMATE2020 > 200000)"
"0",""
"0","write.table(biggestCities, ""rOutputs/biggestCities.csv"", row.names = FALSE, col.names = TRUE, sep = "","")"
