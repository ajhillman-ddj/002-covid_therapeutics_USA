summarise(totalCourses = sum(Total.Courses)) |>
pivot_wider(names_from = Order.Label, values_from = totalCourses)
therapeuticsByCity[is.na(therapeuticsByCity)] <- 0
## To avoid matching to small towns of the same name
filteredPopulationData <- populationData |>
mutate(stateCode = state.abb[match(STNAME,state.name)]) |>
filter(grepl(" city", NAME, fixed = TRUE) & POPESTIMATE2020 > 10000) |>
mutate(cityName = str_to_title(str_replace(NAME, " city", "")))
## To exclude small cities with the same name as a big city within the same state
filteredPopulationData <- filteredPopulationData[c('cityName', 'stateCode', 'POPESTIMATE2020')]
filteredPopulationData <- filteredPopulationData[order(-filteredPopulationData$POPESTIMATE2020),]
filteredPopulationData <- filteredPopulationData[ !duplicated(filteredPopulationData$cityName, filteredPopulationData$stateCode), ]
therapeuticsByCity <- merge(x = therapeuticsByCity, y = filteredPopulationData, by.x=c('City', 'State.Code'), by.y=c('cityName', 'stateCode'), all.x = TRUE)
## Output list of cities that couldn't be matched for checking
listOfMissingMatches <- filter(therapeuticsByCity, is.na(POPESTIMATE2020)) |>
mutate(POPESTIMATE2020 = NULL)
filteredTherapeuticsByCity <- filter(therapeuticsByCity, !is.na(POPESTIMATE2020)) |>
mutate(totalCoursesPer100000 = (Evusheld + Molnupiravir + Paxlovid)*100000/POPESTIMATE2020) |>
mutate(evusheldCoursesPer100000 = Evusheld*100000/POPESTIMATE2020) |>
mutate(molnuCoursesPer100000 = Molnupiravir*100000/POPESTIMATE2020) |>
mutate(paxlovidCoursesPer100000 = Paxlovid*100000/POPESTIMATE2020)
therapeuticsDataSummary <- therapeuticsData |>
group_by(Order.Label) |>
summarise(totalCourses = sum(Total.Courses)) |>
pivot_wider(names_from = Order.Label, values_from = totalCourses)
filteredTherapeuticsByCity <- filteredTherapeuticsByCity |>
mutate(populationShare = POPESTIMATE2020/filter(statePopData, NAME == 'United States')$POPESTIMATE2020) |>
mutate(evusheldShare = Evusheld / therapeuticsDataSummary$Evusheld) |>
mutate(molnuShare = Molnupiravir / therapeuticsDataSummary$Molnupiravir) |>
mutate(paxlovidShare = Paxlovid / therapeuticsDataSummary$Paxlovid) |>
mutate(totalShare = (Evusheld + Molnupiravir + Paxlovid) / (therapeuticsDataSummary$Evusheld + therapeuticsDataSummary$Molnupiravir + therapeuticsDataSummary$Paxlovid))
View(therapeuticsData)
library(tidyverse)
library(readxl)
library(dplyr)
therapeuticsData <- read.csv("Inputs/COVID-19_Public_Therapeutic_Locator (19-01).csv")
populationData <- read.csv("Inputs/SUB-EST2020_ALL.csv")
statePopData <- read.csv("Inputs/nst-est2020.csv")
## To allow for grouping of rows with captialised and uncaptialised city values
therapeuticsData <- therapeuticsData |>
mutate(City = str_to_title(City)) |>
mutate(Total.Courses = case_when(is.na(as.numeric(Total.Courses)) ~ 0, TRUE ~ as.numeric(Total.Courses)))
therapeuticsByCity <- therapeuticsData |>
group_by(Order.Label, City, State.Code) |>
summarise(totalCourses = sum(Total.Courses)) |>
pivot_wider(names_from = Order.Label, values_from = totalCourses)
therapeuticsByCity[is.na(therapeuticsByCity)] <- 0
## To avoid matching to small towns of the same name
filteredPopulationData <- populationData |>
mutate(stateCode = state.abb[match(STNAME,state.name)]) |>
filter(grepl(" city", NAME, fixed = TRUE) & POPESTIMATE2020 > 10000) |>
mutate(cityName = str_to_title(str_replace(NAME, " city", "")))
## To exclude small cities with the same name as a big city within the same state
filteredPopulationData <- filteredPopulationData[c('cityName', 'stateCode', 'POPESTIMATE2020')]
filteredPopulationData <- filteredPopulationData[order(-filteredPopulationData$POPESTIMATE2020),]
filteredPopulationData <- filteredPopulationData[ !duplicated(filteredPopulationData$cityName, filteredPopulationData$stateCode), ]
therapeuticsByCity <- merge(x = therapeuticsByCity, y = filteredPopulationData, by.x=c('City', 'State.Code'), by.y=c('cityName', 'stateCode'), all.x = TRUE)
## Output list of cities that couldn't be matched for checking
listOfMissingMatches <- filter(therapeuticsByCity, is.na(POPESTIMATE2020)) |>
mutate(POPESTIMATE2020 = NULL)
filteredTherapeuticsByCity <- filter(therapeuticsByCity, !is.na(POPESTIMATE2020)) |>
mutate(totalCoursesPer100000 = (Evusheld + Molnupiravir + Paxlovid)*100000/POPESTIMATE2020) |>
mutate(evusheldCoursesPer100000 = Evusheld*100000/POPESTIMATE2020) |>
mutate(molnuCoursesPer100000 = Molnupiravir*100000/POPESTIMATE2020) |>
mutate(paxlovidCoursesPer100000 = Paxlovid*100000/POPESTIMATE2020)
therapeuticsDataSummary <- therapeuticsData |>
group_by(Order.Label) |>
summarise(totalCourses = sum(Total.Courses)) |>
pivot_wider(names_from = Order.Label, values_from = totalCourses)
filteredTherapeuticsByCity <- filteredTherapeuticsByCity |>
mutate(populationShare = POPESTIMATE2020/filter(statePopData, NAME == 'United States')$POPESTIMATE2020) |>
mutate(evusheldShare = Evusheld / therapeuticsDataSummary$Evusheld) |>
mutate(molnuShare = Molnupiravir / therapeuticsDataSummary$Molnupiravir) |>
mutate(paxlovidShare = Paxlovid / therapeuticsDataSummary$Paxlovid) |>
mutate(totalShare = (Evusheld + Molnupiravir + Paxlovid) / (therapeuticsDataSummary$Evusheld + therapeuticsDataSummary$Molnupiravir + therapeuticsDataSummary$Paxlovid))
biggestCities <- filter(filteredTherapeuticsByCity, POPESTIMATE2020 > 200000)
write.table(biggestCities, "rOutputs/biggestCities.csv", row.names = FALSE, col.names = TRUE, sep = ",")
therapeuticsByState <- therapeuticsData |>
group_by(Order.Label, State.Code) |>
summarise(totalCourses = sum(Total.Courses)) |>
pivot_wider(names_from = Order.Label, values_from = totalCourses)
statePopDataFiltered <- statePopData |>
mutate(stateCode = state.abb[match(NAME,state.name)]) |>
filter(!is.na(stateCode))
therapeuticsByState <- merge(x = therapeuticsByState, y = statePopDataFiltered[c('stateCode', 'POPESTIMATE2020')], by.x = 'State.Code', by.y = 'stateCode', all.x = TRUE) |>
filter(!is.na(POPESTIMATE2020)) |>
mutate(totalCoursesPer100000 = (Evusheld + Molnupiravir + Paxlovid)*100000/POPESTIMATE2020) |>
mutate(evusheldCoursesPer100000 = Evusheld*100000/POPESTIMATE2020) |>
mutate(molnuCoursesPer100000 = Molnupiravir*100000/POPESTIMATE2020) |>
mutate(paxlovidCoursesPer100000 = Paxlovid*100000/POPESTIMATE2020) |>
mutate(populationShare = POPESTIMATE2020/filter(statePopData, NAME == 'United States')$POPESTIMATE2020) |>
mutate(evusheldShare = Evusheld / therapeuticsDataSummary$Evusheld) |>
mutate(molnuShare = Molnupiravir / therapeuticsDataSummary$Molnupiravir) |>
mutate(paxlovidShare = Paxlovid / therapeuticsDataSummary$Paxlovid) |>
mutate(totalShare = (Evusheld + Molnupiravir + Paxlovid) / (therapeuticsDataSummary$Evusheld + therapeuticsDataSummary$Molnupiravir + therapeuticsDataSummary$Paxlovid))
write.table(therapeuticsByState, "rOutputs/byStateData.csv", row.names = FALSE, col.names = TRUE, sep = ",")
View(therapeuticsData)
View(therapeuticsByState)
View(therapeuticsByState)
library(tidyverse)
library(readxl)
library(dplyr)
therapeuticsData <- read.csv("Inputs/COVID-19_Public_Therapeutic_Locator (24-01).csv")
populationData <- read.csv("Inputs/SUB-EST2020_ALL.csv")
statePopData <- read.csv("Inputs/nst-est2020.csv")
usCasesData <- read.csv("Inputs/united_states_covid19_cases_deaths_and_testing_by_state.csv", skip = 2)
View(therapeuticsData)
## To allow for grouping of rows with captialised and uncaptialised city values
therapeuticsData <- therapeuticsData |>
mutate(City = str_to_title(City)) |>
mutate(Total.Courses = case_when(is.na(as.numeric(Total.Courses)) ~ 0, TRUE ~ as.numeric(Total.Courses))) |>
mutate(Courses.Available = case_when(is.na(as.numeric(Courses.Available)) ~ 0, TRUE ~ as.numeric(Courses.Available)))
therapeuticsByCity <- therapeuticsData |>
group_by(Order.Label, City, State.Code) |>
summarise(totalCourses = sum(Courses.Available)) |>
pivot_wider(names_from = Order.Label, values_from = totalCourses)
therapeuticsByCity[is.na(therapeuticsByCity)] <- 0
## To avoid matching to small towns of the same name
filteredPopulationData <- populationData |>
mutate(stateCode = state.abb[match(STNAME,state.name)]) |>
filter(grepl(" city", NAME, fixed = TRUE) & POPESTIMATE2020 > 10000) |>
mutate(cityName = str_to_title(str_replace(NAME, " city", "")))
## To exclude small cities with the same name as a big city within the same state
filteredPopulationData <- filteredPopulationData[c('cityName', 'stateCode', 'POPESTIMATE2020')]
filteredPopulationData <- filteredPopulationData[order(-filteredPopulationData$POPESTIMATE2020),]
filteredPopulationData <- filteredPopulationData[ !duplicated(filteredPopulationData$cityName, filteredPopulationData$stateCode), ]
therapeuticsByCity <- merge(x = therapeuticsByCity, y = filteredPopulationData, by.x=c('City', 'State.Code'), by.y=c('cityName', 'stateCode'), all.x = TRUE)
## Output list of cities that couldn't be matched for checking
listOfMissingMatches <- filter(therapeuticsByCity, is.na(POPESTIMATE2020)) |>
mutate(POPESTIMATE2020 = NULL)
filteredTherapeuticsByCity <- filter(therapeuticsByCity, !is.na(POPESTIMATE2020)) |>
mutate(totalCoursesPer100000 = (Evusheld + Molnupiravir + Paxlovid)*100000/POPESTIMATE2020) |>
mutate(evusheldCoursesPer100000 = Evusheld*100000/POPESTIMATE2020) |>
mutate(molnuCoursesPer100000 = Molnupiravir*100000/POPESTIMATE2020) |>
mutate(paxlovidCoursesPer100000 = Paxlovid*100000/POPESTIMATE2020)
therapeuticsDataSummary <- therapeuticsData |>
group_by(Order.Label) |>
summarise(totalCourses = sum(Courses.Available)) |>
pivot_wider(names_from = Order.Label, values_from = totalCourses)
filteredTherapeuticsByCity <- filteredTherapeuticsByCity |>
mutate(populationShare = POPESTIMATE2020/filter(statePopData, NAME == 'United States')$POPESTIMATE2020) |>
mutate(evusheldShare = Evusheld / therapeuticsDataSummary$Evusheld) |>
mutate(molnuShare = Molnupiravir / therapeuticsDataSummary$Molnupiravir) |>
mutate(paxlovidShare = Paxlovid / therapeuticsDataSummary$Paxlovid) |>
mutate(totalShare = (Evusheld + Molnupiravir + Paxlovid) / (therapeuticsDataSummary$Evusheld + therapeuticsDataSummary$Molnupiravir + therapeuticsDataSummary$Paxlovid))
View(therapeuticsByState)
biggestCities <- filter(filteredTherapeuticsByCity, POPESTIMATE2020 > 200000)
write.table(biggestCities, "rOutputs/biggestCities.csv", row.names = FALSE, col.names = TRUE, sep = ",")
therapeuticsByState <- therapeuticsData |>
group_by(Order.Label, State.Code) |>
summarise(totalCourses = sum(Courses.Available)) |>
pivot_wider(names_from = Order.Label, values_from = totalCourses)
statePopDataFiltered <- statePopData |>
mutate(stateCode = state.abb[match(NAME,state.name)]) |>
filter(!is.na(stateCode))
therapeuticsByState <- merge(x = therapeuticsByState, y = statePopDataFiltered[c('stateCode', 'POPESTIMATE2020')], by.x = 'State.Code', by.y = 'stateCode', all.x = TRUE) |>
filter(!is.na(POPESTIMATE2020)) |>
mutate(totalCoursesPer100000 = (Evusheld + Molnupiravir + Paxlovid)*100000/POPESTIMATE2020) |>
mutate(evusheldCoursesPer100000 = Evusheld*100000/POPESTIMATE2020) |>
mutate(molnuCoursesPer100000 = Molnupiravir*100000/POPESTIMATE2020) |>
mutate(paxlovidCoursesPer100000 = Paxlovid*100000/POPESTIMATE2020) |>
mutate(populationShare = POPESTIMATE2020/filter(statePopData, NAME == 'United States')$POPESTIMATE2020) |>
mutate(evusheldShare = Evusheld / therapeuticsDataSummary$Evusheld) |>
mutate(molnuShare = Molnupiravir / therapeuticsDataSummary$Molnupiravir) |>
mutate(paxlovidShare = Paxlovid / therapeuticsDataSummary$Paxlovid) |>
mutate(totalShare = (Evusheld + Molnupiravir + Paxlovid) / (therapeuticsDataSummary$Evusheld + therapeuticsDataSummary$Molnupiravir + therapeuticsDataSummary$Paxlovid))
write.table(therapeuticsByState, "rOutputs/byStateData.csv", row.names = FALSE, col.names = TRUE, sep = ",")
therapeuticsByState <- mutate(therapeuticsByState, molnuAndPaxCoursesPer100000 = (Molnupiravir+Paxlovid)*100000/POPESTIMATE2020)
usCasesData <- mutate(usCasesData, )
usCasesData <- mutate(usCasesData, stateCode = state.abb[match(State.Territory, state.name)])
therapueticsCasesComparisonByState <- merge(x = therapeuticsByState[c("State.Code", "molnuAndPaxCoursesPer100000")], y = usCasesData[c("stateCode", "X7.Day.Cases.Rate.per.100000")], by.x = "State.Code", by.y = "stateCode", all.x = TRUE)
write.table(therapueticsCasesComparisonByState, "rOutputs/therapueticsVSCasesData.csv", row.names = FALSE, col.names = TRUE, sep = ",")
View(therapeuticsByState)
therapeuticsDataPHE <- read_excel("Inputs/PHE-Historical data collection.xlsx",sheet = "24-30 01 22")
View(usCasesData)
usCasesData <- mutate(usCasesData, State.Territory = case_when(
State.Territory == "New York*" ~ "New York",
TRUE ~ State.Territory
))
usCasesData <- mutate(usCasesData, stateCode = state.abb[match(State.Territory, state.name)])
View(usCasesData)
therapeuticsDataPHE <- mutate(therapeuticsDataPHE, stateCode = state.abb[match(State.Territory, state.name)])
View(therapeuticsDataPHE)
therapeuticsData <- read.csv("Inputs/COVID-19_Public_Therapeutic_Locator (24-01).csv")
therapeuticsDataPHE <- read_excel("Inputs/PHE-Historical data collection.xlsx",sheet = "24-30 01 22")
populationData <- read.csv("Inputs/SUB-EST2020_ALL.csv")
statePopData <- read.csv("Inputs/nst-est2020.csv")
usCasesData <- read.csv("Inputs/united_states_covid19_cases_deaths_and_testing_by_state.csv", skip = 2)
## To allow for grouping of rows with captialised and uncaptialised city values
therapeuticsData <- therapeuticsData |>
mutate(City = str_to_title(City)) |>
mutate(Total.Courses = case_when(is.na(as.numeric(Total.Courses)) ~ 0, TRUE ~ as.numeric(Total.Courses))) |>
mutate(Courses.Available = case_when(is.na(as.numeric(Courses.Available)) ~ 0, TRUE ~ as.numeric(Courses.Available)))
therapeuticsByCity <- therapeuticsData |>
group_by(Order.Label, City, State.Code) |>
summarise(totalCourses = sum(Courses.Available)) |>
pivot_wider(names_from = Order.Label, values_from = totalCourses)
therapeuticsByCity[is.na(therapeuticsByCity)] <- 0
## To avoid matching to small towns of the same name
filteredPopulationData <- populationData |>
mutate(stateCode = state.abb[match(STNAME,state.name)]) |>
filter(grepl(" city", NAME, fixed = TRUE) & POPESTIMATE2020 > 10000) |>
mutate(cityName = str_to_title(str_replace(NAME, " city", "")))
## To exclude small cities with the same name as a big city within the same state
filteredPopulationData <- filteredPopulationData[c('cityName', 'stateCode', 'POPESTIMATE2020')]
filteredPopulationData <- filteredPopulationData[order(-filteredPopulationData$POPESTIMATE2020),]
filteredPopulationData <- filteredPopulationData[ !duplicated(filteredPopulationData$cityName, filteredPopulationData$stateCode), ]
therapeuticsByCity <- merge(x = therapeuticsByCity, y = filteredPopulationData, by.x=c('City', 'State.Code'), by.y=c('cityName', 'stateCode'), all.x = TRUE)
## Output list of cities that couldn't be matched for checking
listOfMissingMatches <- filter(therapeuticsByCity, is.na(POPESTIMATE2020)) |>
mutate(POPESTIMATE2020 = NULL)
filteredTherapeuticsByCity <- filter(therapeuticsByCity, !is.na(POPESTIMATE2020)) |>
mutate(totalCoursesPer100000 = (Evusheld + Molnupiravir + Paxlovid)*100000/POPESTIMATE2020) |>
mutate(evusheldCoursesPer100000 = Evusheld*100000/POPESTIMATE2020) |>
mutate(molnuCoursesPer100000 = Molnupiravir*100000/POPESTIMATE2020) |>
mutate(paxlovidCoursesPer100000 = Paxlovid*100000/POPESTIMATE2020)
therapeuticsDataSummary <- therapeuticsData |>
group_by(Order.Label) |>
summarise(totalCourses = sum(Courses.Available)) |>
pivot_wider(names_from = Order.Label, values_from = totalCourses)
filteredTherapeuticsByCity <- filteredTherapeuticsByCity |>
mutate(populationShare = POPESTIMATE2020/filter(statePopData, NAME == 'United States')$POPESTIMATE2020) |>
mutate(evusheldShare = Evusheld / therapeuticsDataSummary$Evusheld) |>
mutate(molnuShare = Molnupiravir / therapeuticsDataSummary$Molnupiravir) |>
mutate(paxlovidShare = Paxlovid / therapeuticsDataSummary$Paxlovid) |>
mutate(totalShare = (Evusheld + Molnupiravir + Paxlovid) / (therapeuticsDataSummary$Evusheld + therapeuticsDataSummary$Molnupiravir + therapeuticsDataSummary$Paxlovid))
biggestCities <- filter(filteredTherapeuticsByCity, POPESTIMATE2020 > 200000)
write.table(biggestCities, "rOutputs/biggestCities.csv", row.names = FALSE, col.names = TRUE, sep = ",")
therapeuticsByState <- therapeuticsData |>
group_by(Order.Label, State.Code) |>
summarise(totalCourses = sum(Courses.Available)) |>
pivot_wider(names_from = Order.Label, values_from = totalCourses)
statePopDataFiltered <- statePopData |>
mutate(stateCode = state.abb[match(NAME,state.name)]) |>
filter(!is.na(stateCode))
therapeuticsByState <- merge(x = therapeuticsByState, y = statePopDataFiltered[c('stateCode', 'POPESTIMATE2020')], by.x = 'State.Code', by.y = 'stateCode', all.x = TRUE) |>
filter(!is.na(POPESTIMATE2020)) |>
mutate(totalCoursesPer100000 = (Evusheld + Molnupiravir + Paxlovid)*100000/POPESTIMATE2020) |>
mutate(evusheldCoursesPer100000 = Evusheld*100000/POPESTIMATE2020) |>
mutate(molnuCoursesPer100000 = Molnupiravir*100000/POPESTIMATE2020) |>
mutate(paxlovidCoursesPer100000 = Paxlovid*100000/POPESTIMATE2020) |>
mutate(populationShare = POPESTIMATE2020/filter(statePopData, NAME == 'United States')$POPESTIMATE2020) |>
mutate(evusheldShare = Evusheld / therapeuticsDataSummary$Evusheld) |>
mutate(molnuShare = Molnupiravir / therapeuticsDataSummary$Molnupiravir) |>
mutate(paxlovidShare = Paxlovid / therapeuticsDataSummary$Paxlovid) |>
mutate(totalShare = (Evusheld + Molnupiravir + Paxlovid) / (therapeuticsDataSummary$Evusheld + therapeuticsDataSummary$Molnupiravir + therapeuticsDataSummary$Paxlovid))
write.table(therapeuticsByState, "rOutputs/byStateData.csv", row.names = FALSE, col.names = TRUE, sep = ",")
therapeuticsByState <- mutate(therapeuticsByState, molnuAndPaxCoursesPer100000 = (Molnupiravir+Paxlovid)*100000/POPESTIMATE2020)
usCasesData <- mutate(usCasesData, State.Territory = case_when(
State.Territory == "New York*" ~ "New York",
TRUE ~ State.Territory
))
usCasesData <- mutate(usCasesData, stateCode = state.abb[match(State.Territory, state.name)])
therapeuticsDataPHE <- mutate(therapeuticsDataPHE, stateCode = state.abb[match(Jurisdiction, state.name)])
View(therapeuticsDataPHE)
therapueticsCasesComparisonByState <- merge(x = therapeuticsByState[c("State.Code", "molnuAndPaxCoursesPer100000")], y = usCasesData[c("stateCode", "X7.Day.Cases.Rate.per.100000")], by.x = "State.Code", by.y = "stateCode", all.x = TRUE)
View(therapeuticsDataPHE)
therapueticsCasesComparisonByState <- merge(x = therapeuticsByState[c("State.Code", "Molnupiravir", "Paxlovid", "POPESTIMATE2020")], y = usCasesData[c("stateCode", "X7.Day.Cases.Rate.per.100000")], by.x = "State.Code", by.y = "stateCode", all.x = TRUE)
therapeuticsCasesComparisonByState <- merge(x = therapeuticsByState[c("State.Code", "Molnupiravir", "Paxlovid", "POPESTIMATE2020")], y = usCasesData[c("stateCode", "X7.Day.Cases.Rate.per.100000")], by.x = "State.Code", by.y = "stateCode", all.x = TRUE)
therapeuticsCasesComparisonByState <- merge(x = therapeuticsCasesComparisonByState, y = therapeuticsDataPHE[c("stateCode", "Sotrovimab")], by.x = "State.Code", by.y = "stateCode", all.x = TRUE)
View(therapeuticsDataPHE)
View(therapueticsCasesComparisonByState)
therapeuticsCasesComparisonByState <- merge(x = therapeuticsCasesComparisonByState, y = therapeuticsDataPHE[c("stateCode", "Sotrovimab")], by.x = "State.Code", by.y = "stateCode", all.x = TRUE)
View(therapueticsCasesComparisonByState)
View(therapueticsCasesComparisonByState)
View(therapueticsCasesComparisonByState)
View(therapeuticsDataPHE)
therapeuticsCasesComparisonByState <- merge(x = therapeuticsCasesComparisonByState, y = therapeuticsDataPHE[c("stateCode", "Sotrovimab")], by.x = "State.Code", by.y = "stateCode", all.x = TRUE)
View(therapeuticsCasesComparisonByState)
rm(therapueticsCasesComparisonByState)
therapeuticsCasesComparisonByState$Sotrovimab.x <- NULL
therapeuticsCasesComparisonByState$Sotrovimab.y <- NULL
therapueticsCasesComparisonByState <- mutate(therapueticsCasesComparisonByState, molnuSotrovPaxCoursesPer100000 = (Molnupiravir+Paxlovid+Sotrovimab)*100000/POPESTIMATE2020)
therapeuticsCasesComparisonByState <- mutate(therapueticsCasesComparisonByState, molnuSotrovPaxCoursesPer100000 = (Molnupiravir+Paxlovid+Sotrovimab)*100000/POPESTIMATE2020)
therapeuticsCasesComparisonByState <- merge(x = therapeuticsCasesComparisonByState, y = therapeuticsDataPHE[c("stateCode", "Sotrovimab")], by.x = "State.Code", by.y = "stateCode", all.x = TRUE)
therapeuticsCasesComparisonByState <- mutate(therapeuticsCasesComparisonByState, molnuSotrovPaxCoursesPer100000 = (Molnupiravir+Paxlovid+Sotrovimab)*100000/POPESTIMATE2020)
View(therapeuticsCasesComparisonByState)
therapeuticsCasesComparisonByState$Sotrovimab.x <- NULL
therapeuticsCasesComparisonByState$Sotrovimab.y <- NULL
therapeuticsCasesComparisonByState <- merge(x = therapeuticsCasesComparisonByState, y = therapeuticsDataPHE[c("stateCode", "Sotrovimab")], by.x = "State.Code", by.y = "stateCode", all.x = TRUE)
therapeuticsCasesComparisonByState <- mutate(therapeuticsCasesComparisonByState, molnuSotrovPaxCoursesPer100000 = (Molnupiravir+Paxlovid+Sotrovimab)*100000/POPESTIMATE2020)
write.table(therapeuticsCasesComparisonByState, "rOutputs/therapeuticsVSCasesData.csv", row.names = FALSE, col.names = TRUE, sep = ",")
View(therapeuticsDataSummary)
usCovidInpatientData <- read.csv("Inputs/COVID-19_Reported_Patient_Impact_and_Hospital_Capacity_by_State (24-01).csv")
View(usCovidInpatientData)
usCovidInpatientData <- read.csv("Inputs/COVID-19_Reported_Patient_Impact_and_Hospital_Capacity_by_State (24-01).csv", skip = 0)
View(usCovidInpatientData)
usCovidInpatientData <- read.csv("Inputs/COVID-19_Reported_Patient_Impact_and_Hospital_Capacity_by_State (24-01).csv", fileEncoding="UTF-8-BOM")
View(usCovidInpatientData)
therapeuticsCasesComparisonByState <- merge(x = therapeuticsCasesComparisonByState, y = usCovidInpatientData[c("state", "inpatient_beds_used_covid")], by.x = "State.Code", by.y = "state", all.x = TRUE)
therapeuticsCasesComparisonByState <- mutate(therapeuticsCasesComparisonByState, covidInpatientsPer100000 = inpatient_beds_used_covid*100000/POPESTIMATE2020)
View(therapeuticsDataPHE)
View(therapeuticsCasesComparisonByState)
therapeuticsCasesComparisonByState <- mutate(therapeuticsCasesComparisonByState, covidInpatientsPer100000 = as.numeric(inpatient_beds_used_covid)*100000/POPESTIMATE2020)
View(therapeuticsCasesComparisonByState)
usCovidInpatientData <- read.csv("Inputs/COVID-19_Reported_Patient_Impact_and_Hospital_Capacity_by_State (24-01).csv", fileEncoding="UTF-8-BOM")
View(usCovidInpatientData)
therapeuticsCasesComparisonByState$inpatient_beds_used_covid <- NULL
therapeuticsCasesComparisonByState <- merge(x = therapeuticsCasesComparisonByState, y = usCovidInpatientData[c("state", "inpatient_beds_used_covid")], by.x = "State.Code", by.y = "state", all.x = TRUE)
therapeuticsCasesComparisonByState <- mutate(therapeuticsCasesComparisonByState, covidInpatientsPer100000 = as.numeric(inpatient_beds_used_covid)*100000/POPESTIMATE2020)
write.table(therapeuticsCasesComparisonByState, "rOutputs/therapeuticsVSCasesData.csv", row.names = FALSE, col.names = TRUE, sep = ",")
write.table(therapeuticsCasesComparisonByState, "rOutputs/therapeuticsVSCasesInpatientsData.csv", row.names = FALSE, col.names = TRUE, sep = ",")
write.table(therapeuticsCasesComparisonByState, "rOutputs/therapeuticsVSCasesInpatientsData.csv", row.names = FALSE, col.names = TRUE, sep = ",")
View(therapeuticsDataPHE)
View(therapeuticsByState)
View(therapeuticsCasesComparisonByState)
View(therapeuticsData)
aaa <- filter(therapeuticsData,State.Code == "ND")
View(aaa)
library(tidyverse)
library(readxl)
library(dplyr)
therapeuticsData <- read.csv("Inputs/COVID-19_Public_Therapeutic_Locator (24-01).csv")
therapeuticsDataPHE <- read_excel("Inputs/PHE-Historical data collection.xlsx", sheet = "24-30 01 22")
populationData <- read.csv("Inputs/SUB-EST2020_ALL.csv")
statePopData <- read.csv("Inputs/nst-est2020.csv")
usCasesData <- read.csv("Inputs/united_states_covid19_cases_deaths_and_testing_by_state.csv", skip = 2)
usCovidInpatientData <- read.csv("Inputs/COVID-19_Reported_Patient_Impact_and_Hospital_Capacity_by_State (24-01).csv", fileEncoding="UTF-8-BOM")
## To allow for grouping of rows with captialised and uncaptialised city values
therapeuticsData <- therapeuticsData |>
mutate(City = str_to_title(City)) |>
mutate(Total.Courses = case_when(is.na(as.numeric(Total.Courses)) ~ 0, TRUE ~ as.numeric(Total.Courses))) |>
mutate(Courses.Available = case_when(is.na(as.numeric(Courses.Available)) ~ 0, TRUE ~ as.numeric(Courses.Available)))
therapeuticsByCity <- therapeuticsData |>
group_by(Order.Label, City, State.Code) |>
summarise(totalCourses = sum(Courses.Available)) |>
pivot_wider(names_from = Order.Label, values_from = totalCourses)
therapeuticsByCity[is.na(therapeuticsByCity)] <- 0
## To avoid matching to small towns of the same name
filteredPopulationData <- populationData |>
mutate(stateCode = state.abb[match(STNAME,state.name)]) |>
filter(grepl(" city", NAME, fixed = TRUE) & POPESTIMATE2020 > 10000) |>
mutate(cityName = str_to_title(str_replace(NAME, " city", "")))
## To exclude small cities with the same name as a big city within the same state
filteredPopulationData <- filteredPopulationData[c('cityName', 'stateCode', 'POPESTIMATE2020')]
filteredPopulationData <- filteredPopulationData[order(-filteredPopulationData$POPESTIMATE2020),]
filteredPopulationData <- filteredPopulationData[ !duplicated(filteredPopulationData$cityName, filteredPopulationData$stateCode), ]
therapeuticsByCity <- merge(x = therapeuticsByCity, y = filteredPopulationData, by.x=c('City', 'State.Code'), by.y=c('cityName', 'stateCode'), all.x = TRUE)
## Output list of cities that couldn't be matched for checking
listOfMissingMatches <- filter(therapeuticsByCity, is.na(POPESTIMATE2020)) |>
mutate(POPESTIMATE2020 = NULL)
filteredTherapeuticsByCity <- filter(therapeuticsByCity, !is.na(POPESTIMATE2020)) |>
mutate(totalCoursesPer100000 = (Evusheld + Molnupiravir + Paxlovid)*100000/POPESTIMATE2020) |>
mutate(evusheldCoursesPer100000 = Evusheld*100000/POPESTIMATE2020) |>
mutate(molnuCoursesPer100000 = Molnupiravir*100000/POPESTIMATE2020) |>
mutate(paxlovidCoursesPer100000 = Paxlovid*100000/POPESTIMATE2020)
therapeuticsDataSummary <- therapeuticsData |>
group_by(Order.Label) |>
summarise(totalCourses = sum(Courses.Available)) |>
pivot_wider(names_from = Order.Label, values_from = totalCourses)
filteredTherapeuticsByCity <- filteredTherapeuticsByCity |>
mutate(populationShare = POPESTIMATE2020/filter(statePopData, NAME == 'United States')$POPESTIMATE2020) |>
mutate(evusheldShare = Evusheld / therapeuticsDataSummary$Evusheld) |>
mutate(molnuShare = Molnupiravir / therapeuticsDataSummary$Molnupiravir) |>
mutate(paxlovidShare = Paxlovid / therapeuticsDataSummary$Paxlovid) |>
mutate(totalShare = (Evusheld + Molnupiravir + Paxlovid) / (therapeuticsDataSummary$Evusheld + therapeuticsDataSummary$Molnupiravir + therapeuticsDataSummary$Paxlovid))
biggestCities <- filter(filteredTherapeuticsByCity, POPESTIMATE2020 > 200000)
write.table(biggestCities, "rOutputs/biggestCities.csv", row.names = FALSE, col.names = TRUE, sep = ",")
therapeuticsByState <- therapeuticsData |>
group_by(Order.Label, State.Code) |>
summarise(totalCourses = sum(Courses.Available)) |>
pivot_wider(names_from = Order.Label, values_from = totalCourses)
statePopDataFiltered <- statePopData |>
mutate(stateCode = state.abb[match(NAME,state.name)]) |>
filter(!is.na(stateCode))
therapeuticsByState <- merge(x = therapeuticsByState, y = statePopDataFiltered[c('stateCode', 'POPESTIMATE2020')], by.x = 'State.Code', by.y = 'stateCode', all.x = TRUE) |>
filter(!is.na(POPESTIMATE2020)) |>
mutate(totalCoursesPer100000 = (Evusheld + Molnupiravir + Paxlovid)*100000/POPESTIMATE2020) |>
mutate(evusheldCoursesPer100000 = Evusheld*100000/POPESTIMATE2020) |>
mutate(molnuCoursesPer100000 = Molnupiravir*100000/POPESTIMATE2020) |>
mutate(paxlovidCoursesPer100000 = Paxlovid*100000/POPESTIMATE2020) |>
mutate(populationShare = POPESTIMATE2020/filter(statePopData, NAME == 'United States')$POPESTIMATE2020) |>
mutate(evusheldShare = Evusheld / therapeuticsDataSummary$Evusheld) |>
mutate(molnuShare = Molnupiravir / therapeuticsDataSummary$Molnupiravir) |>
mutate(paxlovidShare = Paxlovid / therapeuticsDataSummary$Paxlovid) |>
mutate(totalShare = (Evusheld + Molnupiravir + Paxlovid) / (therapeuticsDataSummary$Evusheld + therapeuticsDataSummary$Molnupiravir + therapeuticsDataSummary$Paxlovid))
write.table(therapeuticsByState, "rOutputs/byStateData.csv", row.names = FALSE, col.names = TRUE, sep = ",")
aaa <- filter(therapeuticsData, State.Code == "ND")
usCasesData <- mutate(usCasesData, State.Territory = case_when(
State.Territory == "New York*" ~ "New York",
TRUE ~ State.Territory
))
usCasesData <- mutate(usCasesData, stateCode = state.abb[match(State.Territory, state.name)])
therapeuticsDataPHE <- mutate(therapeuticsDataPHE, stateCode = state.abb[match(Jurisdiction, state.name)])
therapeuticsCasesComparisonByState <- merge(x = therapeuticsByState[c("State.Code", "Molnupiravir", "Paxlovid", "POPESTIMATE2020")], y = usCasesData[c("stateCode", "X7.Day.Cases.Rate.per.100000")], by.x = "State.Code", by.y = "stateCode", all.x = TRUE)
therapeuticsCasesComparisonByState <- merge(x = therapeuticsCasesComparisonByState, y = therapeuticsDataPHE[c("stateCode", "Sotrovimab")], by.x = "State.Code", by.y = "stateCode", all.x = TRUE)
therapeuticsCasesComparisonByState <- mutate(therapeuticsCasesComparisonByState, molnuSotrovPaxCoursesPer100000 = (Molnupiravir+Paxlovid+Sotrovimab)*100000/POPESTIMATE2020)
View(therapeuticsCasesComparisonByState)
therapeuticsData <- read.csv("Inputs/COVID-19_Public_Therapeutic_Locator (24-01).csv")
therapeuticsDataPHE <- read_excel("Inputs/PHE-Historical data collection.xlsx", sheet = "24-30 01 22")
populationData <- read.csv("Inputs/SUB-EST2020_ALL.csv")
statePopData <- read.csv("Inputs/nst-est2020.csv")
usCasesData <- read.csv("Inputs/united_states_covid19_cases_deaths_and_testing_by_state.csv", skip = 2)
## To allow for grouping of rows with captialised and uncaptialised city values
therapeuticsData <- therapeuticsData |>
mutate(City = str_to_title(City)) |>
mutate(Total.Courses = case_when(is.na(as.numeric(Total.Courses)) ~ 0, TRUE ~ as.numeric(Total.Courses))) |>
mutate(Courses.Available = case_when(is.na(as.numeric(Courses.Available)) ~ 0, TRUE ~ as.numeric(Courses.Available)))
therapeuticsByCity <- therapeuticsData |>
group_by(Order.Label, City, State.Code) |>
summarise(totalCourses = sum(Courses.Available)) |>
pivot_wider(names_from = Order.Label, values_from = totalCourses)
therapeuticsByCity[is.na(therapeuticsByCity)] <- 0
## To avoid matching to small towns of the same name
filteredPopulationData <- populationData |>
mutate(stateCode = state.abb[match(STNAME,state.name)]) |>
filter(grepl(" city", NAME, fixed = TRUE) & POPESTIMATE2020 > 10000) |>
mutate(cityName = str_to_title(str_replace(NAME, " city", "")))
## To exclude small cities with the same name as a big city within the same state
filteredPopulationData <- filteredPopulationData[c('cityName', 'stateCode', 'POPESTIMATE2020')]
filteredPopulationData <- filteredPopulationData[order(-filteredPopulationData$POPESTIMATE2020),]
filteredPopulationData <- filteredPopulationData[ !duplicated(filteredPopulationData$cityName, filteredPopulationData$stateCode), ]
therapeuticsByCity <- merge(x = therapeuticsByCity, y = filteredPopulationData, by.x=c('City', 'State.Code'), by.y=c('cityName', 'stateCode'), all.x = TRUE)
## Output list of cities that couldn't be matched for checking
listOfMissingMatches <- filter(therapeuticsByCity, is.na(POPESTIMATE2020)) |>
mutate(POPESTIMATE2020 = NULL)
filteredTherapeuticsByCity <- filter(therapeuticsByCity, !is.na(POPESTIMATE2020)) |>
mutate(totalCoursesPer100000 = (Evusheld + Molnupiravir + Paxlovid)*100000/POPESTIMATE2020) |>
mutate(evusheldCoursesPer100000 = Evusheld*100000/POPESTIMATE2020) |>
mutate(molnuCoursesPer100000 = Molnupiravir*100000/POPESTIMATE2020) |>
mutate(paxlovidCoursesPer100000 = Paxlovid*100000/POPESTIMATE2020)
therapeuticsDataSummary <- therapeuticsData |>
group_by(Order.Label) |>
summarise(totalCourses = sum(Courses.Available)) |>
pivot_wider(names_from = Order.Label, values_from = totalCourses)
filteredTherapeuticsByCity <- filteredTherapeuticsByCity |>
mutate(populationShare = POPESTIMATE2020/filter(statePopData, NAME == 'United States')$POPESTIMATE2020) |>
mutate(evusheldShare = Evusheld / therapeuticsDataSummary$Evusheld) |>
mutate(molnuShare = Molnupiravir / therapeuticsDataSummary$Molnupiravir) |>
mutate(paxlovidShare = Paxlovid / therapeuticsDataSummary$Paxlovid) |>
mutate(totalShare = (Evusheld + Molnupiravir + Paxlovid) / (therapeuticsDataSummary$Evusheld + therapeuticsDataSummary$Molnupiravir + therapeuticsDataSummary$Paxlovid))
## To allow for grouping of rows with captialised and uncaptialised city values
therapeuticsData <- therapeuticsData |>
mutate(City = str_to_title(City)) |>
mutate(Total.Courses = case_when(is.na(as.numeric(Total.Courses)) ~ 0, TRUE ~ as.numeric(Total.Courses))) |>
mutate(Courses.Available = case_when(is.na(as.numeric(Courses.Available)) ~ 0, TRUE ~ as.numeric(Courses.Available)))
therapeuticsByCity <- therapeuticsData |>
group_by(Order.Label, City, State.Code) |>
summarise(totalCourses = sum(Courses.Available)) |>
pivot_wider(names_from = Order.Label, values_from = totalCourses)
therapeuticsByCity[is.na(therapeuticsByCity)] <- 0
## To avoid matching to small towns of the same name
filteredPopulationData <- populationData |>
mutate(stateCode = state.abb[match(STNAME,state.name)]) |>
filter(grepl(" city", NAME, fixed = TRUE) & POPESTIMATE2020 > 10000) |>
mutate(cityName = str_to_title(str_replace(NAME, " city", "")))
## To exclude small cities with the same name as a big city within the same state
filteredPopulationData <- filteredPopulationData[c('cityName', 'stateCode', 'POPESTIMATE2020')]
filteredPopulationData <- filteredPopulationData[order(-filteredPopulationData$POPESTIMATE2020),]
filteredPopulationData <- filteredPopulationData[ !duplicated(filteredPopulationData$cityName, filteredPopulationData$stateCode), ]
therapeuticsByCity <- merge(x = therapeuticsByCity, y = filteredPopulationData, by.x=c('City', 'State.Code'), by.y=c('cityName', 'stateCode'), all.x = TRUE)
## Output list of cities that couldn't be matched for checking
listOfMissingMatches <- filter(therapeuticsByCity, is.na(POPESTIMATE2020)) |>
mutate(POPESTIMATE2020 = NULL)
filteredTherapeuticsByCity <- filter(therapeuticsByCity, !is.na(POPESTIMATE2020)) |>
mutate(totalCoursesPer100000 = (Evusheld + Molnupiravir + Paxlovid)*100000/POPESTIMATE2020) |>
mutate(evusheldCoursesPer100000 = Evusheld*100000/POPESTIMATE2020) |>
mutate(molnuCoursesPer100000 = Molnupiravir*100000/POPESTIMATE2020) |>
mutate(paxlovidCoursesPer100000 = Paxlovid*100000/POPESTIMATE2020)
therapeuticsDataSummary <- therapeuticsData |>
group_by(Order.Label) |>
summarise(totalCourses = sum(Courses.Available)) |>
pivot_wider(names_from = Order.Label, values_from = totalCourses)
filteredTherapeuticsByCity <- filteredTherapeuticsByCity |>
mutate(populationShare = POPESTIMATE2020/filter(statePopData, NAME == 'United States')$POPESTIMATE2020) |>
mutate(evusheldShare = Evusheld / therapeuticsDataSummary$Evusheld) |>
mutate(molnuShare = Molnupiravir / therapeuticsDataSummary$Molnupiravir) |>
mutate(paxlovidShare = Paxlovid / therapeuticsDataSummary$Paxlovid) |>
mutate(totalShare = (Evusheld + Molnupiravir + Paxlovid) / (therapeuticsDataSummary$Evusheld + therapeuticsDataSummary$Molnupiravir + therapeuticsDataSummary$Paxlovid))
biggestCities <- filter(filteredTherapeuticsByCity, POPESTIMATE2020 > 200000)
write.table(biggestCities, "rOutputs/biggestCities.csv", row.names = FALSE, col.names = TRUE, sep = ",")
therapeuticsByState <- therapeuticsData |>
group_by(Order.Label, State.Code) |>
summarise(totalCourses = sum(Courses.Available)) |>
pivot_wider(names_from = Order.Label, values_from = totalCourses)
statePopDataFiltered <- statePopData |>
mutate(stateCode = state.abb[match(NAME,state.name)]) |>
filter(!is.na(stateCode))
therapeuticsByState <- merge(x = therapeuticsByState, y = statePopDataFiltered[c('stateCode', 'POPESTIMATE2020')], by.x = 'State.Code', by.y = 'stateCode', all.x = TRUE) |>
filter(!is.na(POPESTIMATE2020)) |>
mutate(totalCoursesPer100000 = (Evusheld + Molnupiravir + Paxlovid)*100000/POPESTIMATE2020) |>
mutate(evusheldCoursesPer100000 = Evusheld*100000/POPESTIMATE2020) |>
mutate(molnuCoursesPer100000 = Molnupiravir*100000/POPESTIMATE2020) |>
mutate(paxlovidCoursesPer100000 = Paxlovid*100000/POPESTIMATE2020) |>
mutate(populationShare = POPESTIMATE2020/filter(statePopData, NAME == 'United States')$POPESTIMATE2020) |>
mutate(evusheldShare = Evusheld / therapeuticsDataSummary$Evusheld) |>
mutate(molnuShare = Molnupiravir / therapeuticsDataSummary$Molnupiravir) |>
mutate(paxlovidShare = Paxlovid / therapeuticsDataSummary$Paxlovid) |>
mutate(totalShare = (Evusheld + Molnupiravir + Paxlovid) / (therapeuticsDataSummary$Evusheld + therapeuticsDataSummary$Molnupiravir + therapeuticsDataSummary$Paxlovid))
usCasesData <- mutate(usCasesData, State.Territory = case_when(
State.Territory == "New York*" ~ "New York",
TRUE ~ State.Territory
)) |>
mutate(stateCode = state.abb[match(State.Territory, state.name)])
therapeuticsByState <- merge(x = therapeuticsByState, y = usCasesData[c("stateCode", "X7.Day.Cases.Rate.per.100000")], by.x = "State.Code", by.y = "stateCode", all.x = TRUE) |>
mutate(casesShare = `X7.Day.Cases.Rate.per.100000`/ sum(`X7.Day.Cases.Rate.per.100000`))
therapeuticsByState <- therapeuticsByState |>
mutate(casesShare = `X7.Day.Cases.Rate.per.100000`/ sum(`X7.Day.Cases.Rate.per.100000`))
View(therapeuticsByState)
therapeuticsByState <- merge(x = therapeuticsByState, y = usCasesData[c("stateCode", "X7.Day.Cases.Rate.per.100000")], by.x = "State.Code", by.y = "stateCode", all.x = TRUE)
therapeuticsByState <- therapeuticsByState |>
mutate(casesShare = `X7.Day.Cases.Rate.per.100000`/ sum(`X7.Day.Cases.Rate.per.100000`))
View(therapeuticsByState)
therapeuticsByState <- therapeuticsByState |>
mutate(`X7.Day.Cases.Rate.per.100000` = as.numeric(`X7.Day.Cases.Rate.per.100000`))
mutate(casesShare = `X7.Day.Cases.Rate.per.100000`/ sum(`X7.Day.Cases.Rate.per.100000`))
therapeuticsByState <- therapeuticsByState |>
mutate(`X7.Day.Cases.Rate.per.100000` = as.numeric(`X7.Day.Cases.Rate.per.100000`)) |>
mutate(casesShare = `X7.Day.Cases.Rate.per.100000`/ sum(`X7.Day.Cases.Rate.per.100000`))
write.table(therapeuticsByState, "rOutputs/byStateData.csv", row.names = FALSE, col.names = TRUE, sep = ",")
therapeuticsDistributionData <- read_excel("Inputs/PHE-Historical data collection.xlsx", sheet = "CombinedData")
View(therapeuticsDistributionData)
